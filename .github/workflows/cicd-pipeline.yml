name: CICD Pipeline

#
# This is a repository specific local workflow - only the template is auto-generated
#

#
# Start of Template (part 1)
#
on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

env:
  SLACK_NOTIFY: true

# Declare default permissions as read only.
permissions: read-all

jobs:
#
# End of Template (part 1)
#
  get-python-versions:
    name: Get Python Versions
    runs-on: ubuntu-latest
    outputs:
      version-matrix: ${{ steps.get-language-versions.outputs.latest-versions }}
    steps:
    - uses: ActionsToolbox/get-language-versions-action@12914a844dfb5bfa53884aaa1f736f961325f113  # v0.1.0
      id: get-language-versions
      with:
        language: "python"

  bandit:
    name: Bandit
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # 4.5.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Run Bandit
        env:
          EXCLUDE_FILES: '\.md$'
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/bandit/master/pipeline.sh)

  pydocstyle:
    name: Pydocstyle
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # 4.5.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Run Pydocstyle
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/pydocstyle/master/pipeline.sh)

  pycodestyle:
    name: Pycodestyle
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # 4.5.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Run Pycodestyle
        env:
          EXCLUDE_FILES: '\.md$'
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/pycodestyle/master/pipeline.sh)

  pylama:
    name: Pylama
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # 4.5.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Run Pylama
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/pylama/master/pipeline.sh)

  pylint:
    name: Pylint
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # 4.5.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Run Pylint
        env:
          EXCLUDE_FILES: '\.md$,setup.py'
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/pylint/master/pipeline.sh)

  pytest:
    name: Pytest
    needs: get-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-versions: ${{ fromJson(needs.get-python-versions.outputs.version-matrix) }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
      - name: Set up Python ${{ matrix.python-versions }}
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # 4.5.0
        with:
          python-version: ${{ matrix.python-versions }}
      - name: Install required packages
        run: |
          pip install -r requirements.txt
      - name: Run Pytest
        run: |
         pytest --no-header -vv

#
# Start of Template (part 2)
#

  slack-workflow-status:
    if: always()
    name: Slack Post Workflow Notification
    needs:
      - bandit
      - pydocstyle
      - pycodestyle
      - pylint
      - pytest
    runs-on: ubuntu-latest
    steps:
      - name: Slack Workflow Notifications
        if: ${{ env.SLACK_NOTIFY == 'true' && github.event_name == 'push' }}
        uses: Gamesight/slack-workflow-status@26a36836c887f260477432e4314ec3490a84f309 # v1.2.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          include_jobs: on-failure
          include_commit_message: true
#
# End of Template (part 2)
#
